import osimport csvimport routinefrom collections import OrderedDict### This Jussi's script converts eyetracking data in txt-format to gazedata-format# It also converts X- and Y- coordinates to relative values for screen size.# Input folder needs to be relative to the script location in the folder tree.# In this case the folder where this script is located needs to have a folder# named "files_to_change" where the files are located.input_folder = folder = "C:\\Users\\Public\\Documents\\Tampereen yliopisto\\Eye tracker\\TRE Cohort 2\\gazeAnalysisLib analyses\\testing 7mo,trec2"#input_folder = folder = "C:\Users\Public\Documents\Tampereen yliopisto\Eye tracker\TRE Cohort 2\gazeAnalysisLib analyses\7mo,trec2"output_folder = "C:\\Users\\Public\\Documents\\Tampereen yliopisto\\Eye tracker\\TRE Cohort 2\\gazeAnalysisLib analyses\\testing data"file_ext = ".gazedata" #input file extension, .txtoutput_file_ext = ".gazedata"input_file_delimiter = "\t"output_file_delimiter = input_file_delimiter##null_values = [".", ""] # two possible kinds values for missing samples####null_values_new = "-999999" # screen_x_dim = 1920.0 #screen width, adjust for differnt sites? screen_y_dim = 1020.0 #screen height, adjust for differnt sites?headers_folder = os.getcwd() #path for headers inputfileheaders_inputfile = "headers_tre_5mo_to_7mo.txt"###map for one type of "gazedata" (or txt) headers, values may not apply to all gazedata map_header = routine.get_headers(headers_folder, headers_inputfile)# list files in a directorydiritems = os.listdir(input_folder)###subroutine for processing one file##def file_process(file, maptable):####        print (" Filename matches with the specified file_ext -> processing..")####        #self.liststore_exp.append([file])####        input_file = file######        #re-initialize file-specific vars##        ##        newrows = [] #processed data, process in function####        indexed_maptable = {} #processin mpad####        imkeys = [] #processing dict_keys########        # input file reading####        with open(os.path.join(input_folder, input_file), "rt") as inputfile:####            reader = csv.reader(inputfile, delimiter = input_file_delimiter)##            ##            # grab header information, into a list####            headers = next(reader) #reader.__next__() ##            ####            # calculate list index numbers for map-keys####            indexed_maptable = OrderedDict()####            for key in maptable:##                #print("key: " + key)##                #print("index of header: " + str(headers.index(key)))####                indexed_maptable[key] = headers.index(key)##        ####            # loop file rows and cols, ####            imkeys = indexed_maptable.keys()##            ##            for r, row in enumerate(reader):##                ##                newrow = []####                for k, key in enumerate(imkeys):####                    ncol = k #indexed_maptable[key]##                    if r < 20: break#print(ncol)##                    ##                    #If loop goes out of index, print cell####                    try:####                        foo = row[ncol]####                    except(IndexError): ####                        foo = newrows[r-1]####                        foo = foo[k]######                        print("key: " + key)####                        print("index of header: " + str(headers.index(key)))####                        print ("foo: " + str(foo))####                        print ("row: " + str(r) + " col: " + str(ncol))####                        print( str(len(newrows)))######                    # take away the null-values if they exist    ####                    if foo not in null_values: #if row[ncol] not in null_values:####                        if key in ['LEFT_GAZE_X', 'RIGHT_GAZE_X']:####                            newrow.append(float(foo) / 1920.0) #newrow.append(float(row[ncol]) / 1920.0)####                        elif key in ['LEFT_GAZE_Y', 'RIGHT_GAZE_Y']:####                            newrow.append(float(foo) / 1020.0) #newrow.append(float(row[ncol]) / 1020.0)####                        else:####                            newrow.append(foo) #newrow.append(row[ncol])####                    else:####                        newrow.append(null_values_new)####                newrows.append(newrow)####        return newrows, list(imkeys)##                ####        ##                #### [subcode]# "main-like" code                print ("Directory contains " + str(len(diritems)) + " files.")for filenum, file in zip(range(2716), diritems):#for filenum, file in enumerate(diritems): #diritems    #print ("Checking file " + str(filenum + 1) + '/' + str(len(diritems)))    if file.endswith(file_ext):        print ("Process file " + str(filenum + 1) + '/' + str(len(diritems)))        print(file)        #read in data, process, and strore in newrows        args_pro = input_folder, file, map_header                newrows, newheaders = routine.file_process(args_pro)        #print (str(newrows))        print("newrows length: " + str(len(newrows)))        # output file formation        # resolve the output file name        input_filename_parts = file.split(".") #input_file.split(".")        output_file = input_filename_parts[0] + output_file_ext        # open file        with open(os.path.join(output_folder, output_file), "wt") as outputfile:            writer = csv.writer(outputfile, delimiter=output_file_delimiter)            # write header row            writer.writerow(newheaders)                        # write datarows            for newrow in newrows:                writer.writerow(newrow)            print (" File processed.")#    else:        #print (" Filename did not match the file_ext -> did nothing.")